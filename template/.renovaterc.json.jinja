[% from pathjoin("includes", "version_compare.jinja") import version_higher_than -%]
{
    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
    "customManagers": [
        {
            "customType": "regex",
            "datasourceTemplate": "pypi",
            "fileMatch": [
                "^README\\.md$",
                "^\\.devcontainer/Dockerfile$",
                "^\\.github/workflows/.+\\.yml$",
                "^\\.gitlab/workflows/.+\\.yml$",
                "^docs/.+\\.md$"
[%- if project_name == "Serious Scaffold Python" %],
                "^includes/sample\\.jinja$",
                "^template/.*\\.github.*/workflows/.+\\.yml(\\.jinja)?$",
                "^template/.*\\.gitlab.*/workflows/.+\\.yml(\\.jinja)?$",
                "^template/\\.devcontainer/Dockerfile\\.jinja$",
                "^template/docs/.+\\.md(\\.jinja)?$"
[%- endif %]
            ],
            "matchStrings": [
                "pipx install (?<depName>.*?)==(?<currentValue>.*?)[;\n]"
            ]
        },
        {
            "customType": "regex",
            "datasourceTemplate": "repology",
            "depTypeTemplate": "apt",
            "fileMatch": [
                "^\\.devcontainer\\/Dockerfile$"
[%- if project_name == "Serious Scaffold Python" %],
                "^template\\/\\.devcontainer/Dockerfile\\.jinja$"
[%- endif %]
            ],
            "matchStrings": [
                "# renovate: depName=(?<depName>.*?)\nARG .*?_VERSION=\"(?<currentValue>.*)\"\n"
            ],
            "versioningTemplate": "deb"
        },
        {
            "customType": "regex",
            "datasourceTemplate": "github-tags",
            "depNameTemplate": "pdm-project/pdm",
            "fileMatch": [
                "^\\.github/workflows/.+\\.yml$"
[%- if project_name == "Serious Scaffold Python" %],
                "^template/.*\\.github.*/workflows/.+\\.yml(\\.jinja)?$"
[%- endif %]
            ],
            "matchStrings": [
                "uses: pdm-project/setup-pdm[\\s\\S]+?\\sversion: (?<currentValue>.*)\\n"
            ],
            "versioningTemplate": "semver"
        },
        {
            "customType": "regex",
            "datasourceTemplate": "git-tags",
            "depNameTemplate": "https://github.com/serious-scaffold/ss-python.git",
            "depTypeTemplate": "copier-template",
            "fileMatch": [
                "^\\.copier-answers\\.yml$"
            ],
            "matchStrings": [
                "_commit: (?<currentValue>.*?)\n"
            ],
            "versioningTemplate": "semver"
        }
    ],
    "extends": [
        "config:best-practices",
        ":enablePreCommit",
        ":maintainLockFilesWeekly"
    ],
[%- if repo_host_type == "gitlab.com" or reop_host_type == "gitlab-self-managed" or project_name == "Serious Scaffold Python" %]
    "gitlabci": {
        "fileMatch": [
            "^.gitlab/workflows/.*\\.yml$"
        ]
    },
[%- endif %]
    "packageRules": [
[%- if project_name == "Serious Scaffold Python" %]
        {
            "matchDepTypes": [
                "action"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "find template -type f -exec sed -i {{ '\'s|{{{depName}}}@{{{currentDigest}}} # {{{currentValue}}}|{{{depName}}}@{{{newDigest}}} # {{{newValue}}}|g\' {} +' }}"
                ]
            }
        },
        {
            "matchDepTypes": [
                "github-runner"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "find template -type f -exec sed -i {{ '\'s|{{{depName}}}-{{{currentValue}}}|{{{depName}}}-{{{newValue}}}|g\' {} +' }}"
                ]
            }
        },
        {
            "matchManagers": [
                "pre-commit"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "find template -type f -name '.pre-commit-config.yaml.jinja' -exec sed -i {{ '\'/{{{replace \\"/\\" \\"\\\\/\\" depName}}}/{N;s/rev: {{{currentValue}}}/rev: {{{newValue}}}/}\'' }} {} +"
                ]
            }
        },
        {
            "matchDepTypes": [
                "container",
                "image",
                "image-name",
                "service-image"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "find template -type f -exec sed -i {{ '\'s|{{{depName}}}:{{{currentValue}}}@{{{currentDigest}}}|{{{depName}}}:{{{newValue}}}@{{{newDigest}}}|g\' {} +' }}"
                ]
            }
        },
[%- endif %]
        {
            "commitMessageTopic": "serious-scaffold-python",
            "matchDepTypes": [
                "copier-template"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "git stash",
                    "pip install copier",
                    "copier update --defaults --vcs-ref {{ '{{{newVersion}}}' }}"
                ]
            },
            "semanticCommitScope": "copier-template"
        },
        {
            "description": "Group pdm in Dockerfile and GitHub Action",
            "groupName": "pdm",
            "matchDatasources": [
                "github-tags",
                "pypi"
            ],
            "matchDepNames": [
                "pdm",
                "pdm-project/pdm"
            ]
        },
        {
            "description": "Group renovate docker tag and pre-commit-hooks tag",
            "groupName": "renovate tag",
            "matchDatasources": [
                "docker",
                "github-tags"
            ],
            "matchDepNames": [
[%- if repo_host_type == "github.com" %]
                "ghcr.io/renovatebot/renovate",
[%- endif %]
[%- if repo_host_type == "gitlab.com" or reop_host_type == "gitlab-self-managed" or project_name == "Serious Scaffold Python" %]
                "renovate/renovate",
[%- endif %]
                "renovatebot/pre-commit-hooks"
            ]
        },
        {
            "description": "Group apt packages to avoid failure when multiple packages are outdated.",
            "groupName": "apt packages",
            "matchDepTypes": [
                "apt"
            ]
        },
        {
            "description": "Pre-commit 3.5.0 is pinned as the last version supporting Python 3.8.",
            "enabled": false,
            "matchCurrentVersion": "==3.5.0",
            "matchPackageNames": [
                "pre-commit"
            ]
        }
    ]
}
