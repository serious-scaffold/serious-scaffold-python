{% from pathjoin("includes", "version_compare.jinja") import version_lt -%}
"""Settings Module."""
import logging
from logging import getLevelName
{%- if version_lt(minimal_python_version, "3.10") | bool %}
from typing import Optional
{%- endif %}

from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """Project specific settings."""

{%- if version_lt(minimal_python_version, "3.10") | bool %}
    # NOTE(huxuan): Pydantic cannot leverage future annotations at runtime prior to
    # Python 3.10, so `from __future__ import annotations` cannot be used here, and the
    # lint error need to be ignored unless the minimal Python version >= 3.10.
    # Reference: https://github.com/pydantic/pydantic/issues/3300#issuecomment-1034007897
    logging_level: Optional[str] = getLevelName(logging.INFO)  # noqa: FA100
{%- else %}
    logging_level: str | None = getLevelName(logging.INFO)
{%- endif %}
    """Default logging level for the project."""

    model_config = SettingsConfigDict(
        env_prefix="{{ module_name|upper }}_",
    )


class GlobalSettings(BaseSettings):
    """System level settings."""

    ci: bool = False
    """Indicator for whether or not in CI/CD environment."""


#: Instance for project specific settings.
settings = Settings()

#: Instance for system level settings.
global_settings = GlobalSettings()
