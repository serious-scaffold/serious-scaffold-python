_envops:
  block_end_string: '%]'
  block_start_string: '[%'
_subdirectory: template
project_name:
  default: Serious Scaffold Python
  help: 'Enter the name of the project in CamelCase format:'
  type: str
project_description:
  default: A development-focused Python project template with various integrations, configurations and modules.
  help: 'Provide a brief description for the project:'
  type: str
author_name:
  default: huxuan
  help: 'Specify the name of the author:'
  type: str
organization_name:
  default: Serious Scaffold
  help: 'Provide the name of the organization associated with the project:'
  type: str
author_email:
  default: |-
    [% if author_name == 'huxuan' and organization_name == 'Serious Scaffold' -%]
      i@huxuan.org
    [%- else -%]
      {{ author_name }}@{{ organization_name|lower|replace(" ", "-") }}.com
    [%- endif %]
  help: 'Specify the email address of the author:'
  type: str
repo_host_type:
  default: github.com
  choices:
    GitHub: github.com
    GitLab: gitlab.com
    GitLab (self-managed): gitlab-self-managed
  help: 'Choose the host for the repository:'
  type: str
repo_host:
  default: '{{ repo_host_type }}'
  help: 'Specify the host of the self-managed GitLab:'
  type: str
  when: '{{ repo_host_type == "gitlab-self-managed" }}'
page_host:
  default: |-
    [% if repo_host_type == 'github.com' -%]
      github.io
    [%- elif repo_host_type == 'gitlab.com' -%]
      gitlab.io
    [%- endif %]
  help: 'Specify the host of the self-managed GitLab Pages:'
  type: str
  when: '{{ repo_host_type == "gitlab-self-managed" }}'
repo_namespace:
  default: '{{ organization_name|lower|replace(" ", "-") }}'
  help: 'Indicate the GitHub Repository Owner or GitLab Namespace. This is typically the account name of the author or the organization:'
  type: str
repo_name:
  default: '{{ project_name|lower|replace(" ", "-") }}'
  help: 'Provide a name for the repository:'
  type: str
package_name:
  default: '{{ repo_name|regex_replace("-python$", "") }}'
  help: 'Specify the name of the distributable package for the project (often used in "pip install <package_name>"):'
  type: str
module_name:
  default: '{{ package_name|lower|replace("-", "_") }}'
  help: 'Specify the name of the primary module within the package (often used in "import <module_name>"):'
  type: str
coverage_threshold:
  default: 100
  help: 'Set the threshold for test coverage, ranging from 0 to 100:'
  type: int
  validator: '[% if not 0 <= coverage_threshold <= 100 %]Test Coverage threshold should be between 0 and 100[% endif %]'
min_py:
  default: '3.8'
  choices:
    - '3.8'
    - '3.9'
    - '3.10'
    - '3.11'
  help: 'Choose the minimal Python version the project should support:'
  type: str
max_py:
  default: '3.11'
  choices:
    '3.8':
      validator: '[% from pathjoin("includes", "version_compare.jinja") import version_higher_than_validator %]{{ version_higher_than_validator("3.8", min_py) }}'
      value: '3.8'
    '3.9':
      validator: '[% from pathjoin("includes", "version_compare.jinja") import version_higher_than_validator %]{{ version_higher_than_validator("3.9", min_py) }}'
      value: '3.9'
    '3.10':
      validator: '[% from pathjoin("includes", "version_compare.jinja") import version_higher_than_validator %]{{ version_higher_than_validator("3.10", min_py) }}'
      value: '3.10'
    '3.11':
      value: '3.11'
  help: 'Choose the maximal Python version the project should support:'
  type: str
default_py:
  default: '{{ max_py }}'
  choices:
    '3.8':
      validator: '[% from pathjoin("includes", "version_compare.jinja") import version_between_validator %]{{ version_between_validator("3.8", min_py, max_py) }}'
      value: '3.8'
    '3.9':
      validator: '[% from pathjoin("includes", "version_compare.jinja") import version_between_validator %]{{ version_between_validator("3.9", min_py, max_py) }}'
      value: '3.9'
    '3.10':
      validator: '[% from pathjoin("includes", "version_compare.jinja") import version_between_validator %]{{ version_between_validator("3.10", min_py, max_py) }}'
      value: '3.10'
    '3.11':
      validator: '[% from pathjoin("includes", "version_compare.jinja") import version_between_validator %]{{ version_between_validator("3.11", min_py, max_py) }}'
      value: '3.11'
  help: 'Choose the default Python version for development, documentation generation, and package build:'
  type: str
